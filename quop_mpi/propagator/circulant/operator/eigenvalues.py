from importlib import import_module
import numpy as np

def complete(
        system_size,
        local_o,
        local_o_offset):

    """Generates a parallel partition of the eigenvalues of a complete
    circulant matrix.

    :param system_size: Size of the graph :math:`N`.
    :type system_size: integer

    :param local_o: Number of local elements following FFTW transformation of the state vector.
    :type local_o: integer

    :param local_o_offset: Offset of the transformed local partition relative to the globally distributed state vector.
    :type local_o_offset: integer

    :return: Local parallel partition of the graph eigenvalues.
    :rtype: array, complex
    """

    fqwoa_mpi = import_module('quop_mpi.__lib.fqwoa_mpi')

    graph_array = np.ones(system_size, dtype = np.float64)
    graph_array[0] = 0

    return fqwoa_mpi.graph_eigenvalues(graph_array, local_o, local_o_offset)/system_size

def graph(
        system_size,
        local_o,
        local_o_offset,
        i = 1):

    """
    Returns the eigenvalues of the :math:`i^{\\text{th}}` symmetric circulant matrix. The eigenvalues of a complete graph are generated by :math:`i = N//2 + 1`.

    :param system_size: Size of the graph :math:`N`.
    :type system_size: integer

    :param local_o: Number of local elements following FFTW transformation of the state vector.
    :type local_o: integer

    :param local_o_offset: Offset of the transformed local partition relative to the globally distributed state vector.
    :type local_o_offset: integer

    :param i: Index of the symmetric circulant graph.
    :type i: optional, integer, default = 1

    :return: Local parallel partition of the graph eigenvalues.
    :rtype: array, complex
    """
    fqwoa_mpi = import_module('quop_mpi.__lib.fqwoa_mpi')

    if (i > system_size//2):

        graph_array = np.ones(system_size, dtype = np.float64)
        graph_array[0] = 0

    else:

        graph_array = np.zeros(system_size, dtype = np.float64)

        for j in range(1,i+1):
            graph_array[j] = 1
            graph_array[system_size - j]=1

    eigenvalues = fqwoa_mpi.graph_eigenvalues(
            graph_array,
            local_o,
            local_o_offset)

    return eigenvalues
